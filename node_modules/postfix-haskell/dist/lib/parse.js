"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const scan_1 = require("./scan");
const value = require("./value");
const context_1 = require("./context");
const macro_1 = require("./macro");
const error = require("./error");
/*
The name for this file is somewhat misleading but technically correct

Because lang is postfix, just having a lexer is enough to create AST, however
For this language user interacts with this module through operators in order to
make a somewhat different expression tree
*/
/**
 * Create parse tree
 *
 * @param tokens - tokens to parse
 * @param ctx - parse ctx
 */
function parse(tokens, ctx = new context_1.default(undefined, tokens[0].file)) {
    // For each token
    for (let i = 0; i < tokens.length; i++) {
        const t = tokens[i];
        switch (t.type) {
            // Need to determine number type from literal
            case scan_1.LexerToken.Type.Number:
                ctx.push(new value.NumberValue(t, t.value));
                break;
            // Blocks: Need to form a closure with current scope
            case scan_1.LexerToken.Type.Block:
                ctx.push(new value.MacroValue(t, new macro_1.LiteralMacro(ctx, t)));
                break;
            case scan_1.LexerToken.Type.String:
                ctx.push(new value.StrValue(t));
                break;
            // Identifiers: also need to bind scope
            case scan_1.LexerToken.Type.Identifier:
                // Handle subtypes
                if (t.token[0] === '$') {
                    // Escaped symbol
                    ctx.push(new value.IdValue(t, t.token, ctx.scopes.slice()));
                }
                else {
                    // Invoke operator
                    let v = ctx.getId(t.token);
                    if (!v)
                        return new error.SyntaxError(`${t.token} is undefined`, t, ctx);
                    // console.log('invoke', t.token, v);
                    const ret = ctx.invoke(v, t);
                    // TODO this returns null sometimes
                    if (!(ret instanceof context_1.default))
                        return ret;
                }
                break;
        }
    }
    return ctx;
}
exports.default = parse;
;
//# sourceMappingURL=parse.js.map