"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceResults = void 0;
const fs = require("fs");
const binaryen = require("binaryen");
const wabtMod = require("wabt");
const value = require("./value");
const types = require("./datatypes");
const error = require("./error");
const expr = require("./expr");
const numbers_1 = require("./numbers");
const debug_macros_1 = require("./debug_macros");
const globals_1 = require("./globals");
const module_1 = require("./module");
const macro_1 = require("./macro");
// Load wabt on next tick
const wabtProm = wabtMod();
// TODO this class is fucking massive and should be split into different components
//  so that the amount of state it manages is more segregated clear
// Return Types for Context.traceIO() method
class TraceResults {
    constructor(takes, gives, delta) {
        this.takes = takes;
        this.gives = gives;
        this.delta = delta;
    }
}
exports.TraceResults = TraceResults;
;
;
/**
 * This class stores state assocated with the parser
 *
 * TODO remove public API's
 */
class Context {
    // Default constructor
    constructor(optLevel = 1, entryPoint) {
        this.entryPoint = entryPoint;
        // Place to push/pop arugments & exprs
        this.stack = [];
        // Identifier map
        this.scopes = [{}];
        // Invoke stack
        this.trace = [];
        // Tracking for traceIO and recursion stuff
        this.traceResults = [];
        // Stack tracing cunters
        this.initialStackSize = 0;
        this.minStackSize = 0;
        // Warnings
        this.warnings = [];
        this.recursiveMacros = new Set();
        // Recycled `include` namespaces
        this.includedFiles = {};
        // Initialize Module Manager
        this.optLevel = optLevel;
        this.module = new module_1.default(this);
        // Initialize globals
        this.globals = {
            ...globals_1.default,
            ...debug_macros_1.default, // Debug operators
        };
        Object.entries(types.PrimitiveType.Types).forEach(([typeName, type]) => this.globals[typeName] = new value.Value(null, value.ValueType.Type, type));
        this.globals['Any'] = new value.Value(null, value.ValueType.Type, new types.AnyType());
        // If there's an entry file we need to track imports to it
        if (entryPoint)
            this.includedFiles[fs.realpathSync(entryPoint)] = new macro_1.NamespaceMacro(this.scopes[0]);
    }
    /**
     * Copy Context state
     * @returns {Object} - state copy object
     */
    copyState() {
        // Copy data
        const ret = {
            stack: this.stack,
            scopes: this.scopes,
            globals: this.globals,
            initialStackSize: this.initialStackSize,
            minStackSize: this.minStackSize,
            warnings: this.warnings,
            module: this.module,
            // Prob not needed...
            trace: this.trace,
            traceResults: this.traceResults,
        };
        // Make copies of all the state data
        this.restoreState({
            stack: [...this.stack],
            scopes: [...this.scopes.map(s => ({ ...s }))],
            globals: { ...this.globals },
            initialStackSize: this.initialStackSize,
            minStackSize: this.minStackSize,
            warnings: [...this.warnings],
            module: this.module.clone(),
            // Prob not needed...
            trace: [...this.trace],
            traceResults: [...this.traceResults],
        });
        return ret;
    }
    /**
     * Restore copied state
     * @param obj - state copy object from Context.copyState()
     */
    restoreState(obj) {
        this.stack = obj.stack;
        this.scopes = obj.scopes;
        this.globals = obj.globals;
        this.initialStackSize = obj.initialStackSize;
        this.minStackSize = obj.minStackSize;
        this.warnings = obj.warnings;
        this.trace = obj.trace;
        this.traceResults = obj.traceResults;
        this.module = obj.module;
    }
    /**
     * Look up identifier
     *
     * @param id - identifier name
     * @param [scopes] - scopes to check in
     * @returns returns value stored if found
     */
    getId(id, scopes = this.scopes) {
        // Resolve Local
        for (let i = scopes.length - 1; i >= 0; i--)
            if (scopes[i][id])
                return scopes[i][id];
        // Resolve Global
        return this.globals[id];
    }
    /**
     * Get index for first value on stack that hasn't been seen before
     *
     * @param old - index for first value on stack that hasn't been seen before
     * @deprecated
     */
    cmpStack(old) {
        let i = 0;
        for (; i < old.length; i++)
            if (this.stack[i] !== old[i])
                return i;
        return i;
    }
    /**
     * Determine number of inputs and outputs
     * @param v - value to invoke
     * @param knownResults - trace results to use for recursion
     */
    traceIO(v, token, knownResults = { result: null, body: null }) {
        // console.log(v);
        // console.log('trace', v);
        // Copy state
        const initialState = this.copyState();
        this.minStackSize = this.stack.length;
        // initiate trace
        this.traceResults.push({
            value: v, ...knownResults,
            token, // prolly not needed
        });
        // Invoke
        // console.log('trace:', (token && token.token), 'known:', (!!knownResults.result));
        const rv = this.invoke(v, token, true);
        // console.log(this.stack, this.minStackSize);
        // Forward errors
        if (!(rv instanceof Context)) {
            this.restoreState(initialState);
            // if (rv === null) {
            //     console.log('null trace result!');
            // }
            return rv;
        }
        // Determine state change
        const ntakes = initialState.stack.length - this.minStackSize;
        const ngives = this.stack.length - this.minStackSize;
        const takes = initialState.stack.slice(0, ntakes);
        const gives = this.stack.slice(-ngives);
        const delta = this.stack.length - initialState.stack.length;
        // const delta = gives.length - takes.length;
        // console.log({
        //     ntakes, ngives, delta, takes, gives,
        // });
        this.restoreState(initialState);
        return new TraceResults(takes, gives, delta);
    }
    /**
     *
     * @param {*} v
     * @returns TraceResultTracker or null
     */
    _getTraceResults(v) {
        // TODO also check takes datatypes and constexprs against stack
        for (let i = this.traceResults.length - 1; i >= 0; i--)
            if (this.traceResults[i].value === v)
                return this.traceResults[i];
        return null;
    }
    /**
     * Invoke macro or function
     * @param v - value to invoke
     * @param token - location in source
     * @param isTrace - is this a trace invoke? or normal?
     * @returns - null if recursive trace, error.SyntaxError on error, this on success
     */
    invoke(v, token, isTrace = false) {
        // TODO this algorithm is extrememly complicated and confusing and inefficient
        //  there must be a simpler way... time spent to create: ~1 month
        // When invoked static strings get their address and length pushed onto the stack
        if (v instanceof value.StrValue) {
            this.push(new value.NumberValue(token, new numbers_1.default(numbers_1.default.Type.I32, v.value.length)));
            this.push(new value.NumberValue(token, new numbers_1.default(numbers_1.default.Type.I32, this.module.addStaticData(v.value))));
            return this;
        }
        // If not invokable just put it on the stack
        if (![value.ValueType.Fxn, value.ValueType.Macro].includes(v.type)) {
            this.push(v);
            return this;
        }
        // Check trace status
        const tResults = this._getTraceResults(v);
        // console.log("invoke:", (token && token.token),
        //     'recursive:', recursiveInv,
        //     'results:', tResults ? (tResults.result && typeof tResults.result) : 'false');
        // Try to invoke normally
        // TODO handle constexprs specially
        if (!v.value.recursive || isTrace) {
            // console.log('non rec', token.token, v.type);
            this.trace.push(v.value);
            if (this.trace.length > 1000) {
                console.warn('1000 invocations reached, you probably forgot to use `rec`');
                // const toks = this.trace.map(t => t && t.token?.token);
                // console.info('Tokens: ',
                //     toks.slice(0, 20).join(', '),
                //     ' ... ', toks.slice(-20).join(', '));
                // const trace = this.trace.slice(0, 10).map(v => v.token)
                //     .concat(this.trace.slice(-10).map(v => v.token));
                throw new error.SyntaxError('Max call stack exceeded', this.trace.map(v => v.token), this);
            }
            const ret = this.toError(v.value.action(this, token), token);
            this.trace.pop();
            return ret;
        }
        // It's recursive and we didn't see it yet
        // if (v.value.recursive && (!tResults || tResults.result !== null) && !this.recursiveMacros.has(v.value))
        //     throw v;
        // if (!recursiveInv)
        //     console.log('proc recursive');
        // This is complicated because of recursion :(
        // TODO copy explanation from tg channel
        if (tResults === null) { // Not currently tracing
            // Trace results not found, Handle recursive call
            // TODO if all inputs are constexprs => inline/invoke simple
            // Replace stack with expression wrappers so that they can be replaced with locals later
            const stack = this.stack.slice();
            this.stack = this.stack.map((v, i) => v instanceof expr.DataExpr || v instanceof value.DataValue
                ? new expr.RecursiveTakesExpr(v.token, v.datatype, this.stack.length - i, v)
                : v);
            // Identify value as recursive
            this.recursiveMacros.add(v.value);
            // Make body of (loop ...)
            const body = new expr.RecursiveBodyExpr(token);
            // Trace once to determine non-recursive case
            // console.log('trace 1');
            const ios = this.traceIO(v, token);
            if (!(ios instanceof TraceResults))
                return ios;
            if (!ios.takes)
                throw new Error("wtf?");
            // If all inputs are constexprs, invoke at compile-time
            if (!stack.slice(0, ios.takes.length).some(v => v.type === value.ValueType.Expr)) {
                this.trace.push(v.value);
                try {
                    this.stack = stack;
                    const ret = this.toError(v.value.action(this, token), token);
                    this.trace.pop();
                    return ret;
                }
                catch (e) {
                    this.trace.pop();
                    throw e;
                }
            }
            // Link body inputs
            // Generate input locals
            body.takes = ios.takes;
            body.takeExprs = body.takes.map(e => e.type === value.ValueType.Expr ? new expr.DependentLocalExpr(token, e.datatype, body) : null);
            // Generate results
            body.gives = ios.gives;
            body.giveExprs = body.gives.map(e => e.type === value.ValueType.Expr ? new expr.DependentLocalExpr(token, e.datatype, body) : null);
            // Trace again, this time substituting non-recursive trace results with recursive calls
            this.stack = body.takeExprs.slice();
            // console.log('trace 2');
            const ios2 = this.traceIO(v, token, { result: ios, body });
            if (!(ios2 instanceof TraceResults))
                return ios2;
            // Done with it
            this.recursiveMacros.delete(v.value);
            // Update body
            body.gives = ios2.gives;
            // body.takes = ios2.takes;
            // Update stack
            this.stack = stack;
            this.popn(ios2.takes.length);
            this.push(...body.giveExprs);
            return this;
        }
        else if (tResults.result) { // Invoking an already traced recursive function
            // console.log('tail:', token.token);
            // This is an invocation of a recursive function within it's body
            const { result, body } = tResults;
            // Get args to recursive call
            const args = this.popn(result.takes.length).reverse();
            for (let i = 0; i < args.length; i++)
                if (!args[i].out)
                    // TODO this shouldn't suck so bad :(
                    return new error.SyntaxError(`cannot pass abstract value ${args[i]} in recursive call`, token, this);
            const callExpr = new expr.RecursiveCallExpr(token, body, args);
            // Note that if they're used after this it woudln't be tail recursion and would be unreachable
            this.push(...callExpr.giveExprs);
            return this;
        }
        else if (tResults.result === null) {
            // Recursive tracing (bad!)
            // console.log('already tracing!', token.token);
            // console.log('already tracing!', token);
            // console.log(new Error().stack);
            return null; // already tracing
        }
        throw new Error("Should not get here wtf???!");
        return this;
    }
    /**
     * Handles some unclean macro return values
     * @param v - value to convert to error
     * @param token - location in code
     */
    toError(v, token) {
        // Success
        if (v === undefined)
            return this;
        if (v === null || v instanceof Context)
            return v;
        // Error
        if (v instanceof Array)
            v = new error.SyntaxError(v.map(e => `${token.token}: ${e}`).join('; '), token, this);
        if (v instanceof error.SyntaxError)
            v.tokens.push(token);
        return v;
    }
    /**
     * Push value onto stack
     * @param {Value[]} v  - push something on to the stack
     */
    push(...v) {
        this.stack.push(...v);
    }
    /**
     * Pull value from stack
     * @returns - last value from stack
     */
    pop() {
        // Pop value
        const v = this.stack.pop() || undefined;
        // Update trackers
        if (this.stack.length < this.minStackSize)
            this.minStackSize = this.stack.length;
        return v;
    }
    /**
     * Pull multiple values from stack
     * @retuns {Value[]} - list of values from stack
     */
    popn(n) {
        // Pull values
        const ret = [];
        for (let i = 0; i < n; i++)
            ret.push(this.stack.pop());
        // Update trackers
        if (this.stack.length < this.minStackSize)
            this.minStackSize = this.stack.length;
        return ret;
    }
    /**
     * Warn the user when something seems weird
     *
     * @param token - location in code
     * @param msg - what's wrong
     */
    warn(token, msg) {
        console.warn("WARNING: ", msg, token);
        this.warnings.push({ token, msg });
    }
    /**
     * Compiles program to WASM Text form
     * @param options - settings
     * @returns - WAST source code
     */
    async outWast({ fast = false, folding = false, optimize = false, validate = false }) {
        // Generate webassembly text
        const src = this.module.compile();
        if (fast)
            return src;
        let mod;
        try {
            const wabt = await wabtProm;
            mod = wabt.parseWat("test", src, {
                exceptions: true,
                mutable_globals: true,
                sat_float_to_int: true,
                sign_extension: true,
                simd: true,
                threads: true,
                multi_value: true,
                tail_call: true,
                bulk_memory: true,
                reference_types: true,
                annotations: true,
                gc: true,
            });
        }
        catch (e) {
            console.log('parse failed!');
            return src;
        }
        // Validate
        if (validate) {
            try {
                const invalid = mod.validate();
                if (invalid) {
                    console.error(invalid);
                    console.log(src);
                    return;
                }
            }
            catch (e) {
                console.log(src);
                throw e;
            }
        }
        // Pass through binaryen for optimizations
        //  NOTE this doesn't work
        //  Something wrong with binaryen.js ig
        if (optimize) {
            const m2 = binaryen.readBinary(mod.toBinary({}).buffer);
            m2.optimize();
            m2.validate();
            return folding ? m2.emitText() : m2.emitStackIR();
        }
        return mod.toText({ foldExprs: folding, });
        /*
        const mod = binaryen.parseText(src);

        // Invalid?! return unchecked code for debugging compiler
        if (!mod.validate()) {
            console.error('invalid wast?!!');
            return src;
        }

        // Return wat
        return options.folding ? mod.emitText() : mod.emitStackIR();
        */
    }
    /**
     * Use Compiles program to WebAssembly Text and then uses WABT to convert to binary
     * @returns - Wasm binary buffer
     */
    async outWasm() {
        const src = await this.outWast({ fast: true });
        const wabt = await wabtProm;
        const mod = wabt.parseWat("test", src, {
            exceptions: true,
            mutable_globals: true,
            sat_float_to_int: true,
            sign_extension: true,
            simd: true,
            threads: true,
            multi_value: true,
            tail_call: true,
            bulk_memory: true,
            reference_types: true,
            annotations: true,
            gc: true,
        });
        // Validate
        const invalid = mod.validate();
        return mod.toBinary({ log: true });
    }
}
exports.default = Context;
// Link external class
Context.TraceResults = TraceResults;
;
//# sourceMappingURL=context.js.map