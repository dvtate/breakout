#!/usr/bin/node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// External
const fs = require("fs");
// Internal
const scan_1 = require("../lib/scan");
const parse_1 = require("../lib/parse");
const error = require("../lib/error");
const context_1 = require("../lib/context");
const util = require("./util");
/***
 * Compile a file to webassembly text and print it's contents
 * @param fname - name of the source file
 * @param [trackTime] - print debug info or not
 * @param [fast] - skip pretty-print and validation steps
 * @param [folding] - pretty-print formatting option
 * @param [optimize] - pass through binaryen optimizer
 */
async function compileFile(fname, trackTime = true, fast = false, folding = false, optimize = false) {
    // Replace with full, absolute path
    fname = fs.realpathSync(fname);
    // Read file
    let src;
    try {
        src = fs.readFileSync(fname).toString();
    }
    catch (e) {
        console.error('could not read file ', fname);
        throw e;
    }
    // Mock browser API - `performance.now()`
    const performance = globalThis.performance || {
        _hrt: process.hrtime(),
        now() {
            return process.hrtime(this._hrt)[1] / 1000000;
        },
    };
    // Lex
    let start = performance.now();
    const ptree = (0, scan_1.default)(src, fname);
    if (trackTime)
        console.log('lex:', performance.now() - start);
    try {
        // Parse (weird meaning here, more like "interpret phase")
        start = performance.now();
        const ctx = (0, parse_1.default)(ptree, new context_1.default(process.env.FAST ? 1 : 2, fname));
        if (ctx instanceof error.SyntaxError) {
            // console.log(ctx.tokens);
            console.log(util.formatErrorPos([ctx]));
            process.exit(0);
        }
        else if (ctx === null) {
            console.error('parse failed with null!');
            return null;
        }
        if (trackTime)
            console.log('parse:', performance.now() - start);
        // Output assembly
        start = performance.now();
        const wast = await ctx.outWast({ folding, fast, optimize, });
        console.log(wast);
        if (trackTime)
            console.log('compile:', performance.now() - start);
        return wast;
    }
    catch (e) {
        if (e instanceof error.SyntaxError) {
            console.log(util.formatErrorPos([e]));
            return null;
        }
        throw e;
    }
}
exports.default = compileFile;
;
//# sourceMappingURL=file.js.map